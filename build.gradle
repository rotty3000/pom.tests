/*
 * Master Gradle build script
 *
 * Depends on bndPlugin property set by settings.gradle.
 * and bnd_* values from gradle.properties.
 */

import aQute.bnd.build.ProjectLauncher
import aQute.bnd.build.Run
import aQute.bnd.build.Workspace
import aQute.bnd.osgi.Constants
import biz.aQute.resolve.ProjectResolver
import org.osgi.resource.Capability
import org.osgi.resource.Resource
import org.osgi.resource.Wire

/* Add bnd gradle plugin as a script dependency */
buildscript {
  dependencies {
    classpath bndPlugin
  }
}

/* Initialize the bnd workspace */
Workspace.setDriver(Constants.BNDDRIVER_GRADLE)
Workspace.addGestalt(Constants.GESTALT_BATCH, null)
ext.bndWorkspace = new Workspace(rootDir, bnd_cnf)
if (bndWorkspace == null) {
  throw new GradleException("Unable to load workspace ${rootDir}/${bnd_cnf}")
}

ext.cnf = rootProject.project(bnd_cnf)

/* Configure the subprojects */
subprojects {
  def bndProject = bndWorkspace.getProject(name)
  if (bndProject != null) {
    plugins.apply 'biz.aQute.bnd'

    tasks.addRule('Pattern: resolve.<name>: Resolve the bnd(run) file <name>.bnd(run).') { taskName ->
		if (taskName.startsWith('resolve.')) {
			def bndrun = taskName - 'resolve.'
			def runFile = getRunFile(projectDir, bndrun)
			if (runFile.isFile()) {
				task(taskName) {
					description "Resolve the bndrun file ${bndrun}.bnd(run)."
					dependsOn assemble
					group 'export'
					doLast {
						println "Resolving ${bndrun}"
						Run run = new Run(bndWorkspace, buildDir, runFile)
						ProjectResolver pr = new ProjectResolver(run)
						pr.setTrace(true)
						Map<Resource,List<Wire>> resolve = pr.resolve()
						def output = ""
						output += "-runbundles: \\\n\t"
						def prefix = ""
						resolve.keySet().toSorted().each {k ->
							output += "${prefix}${toString(k)}"
							prefix = ",\\\n\t"
						}
						println "${output}"
					}
				}
			}
		}
	}

    tasks.addRule('Pattern: run.<name>: Run the bnd(run) file <name>.bnd(run).') { taskName ->
		if (taskName.startsWith('run.')) {
			def bndrun = taskName - 'run.'
			def runFile = getRunFile(projectDir, bndrun)
			if (runFile.isFile()) {
				task(taskName) {
					description "Run the bnd(run) file <name>.bnd(run)."
					dependsOn assemble
					group 'export'
					doLast {
						Run run = new Run(bndWorkspace, buildDir, runFile)
						println "Running ${bndrun} with\n  -runvm: ${run.getProperty('-runvm*')}"
						ProjectLauncher l = run.getProjectLauncher();
						l.setTrace(true);
						l.launch();
					}
				}
			}
		}
	}

    tasks.addRule('Pattern: debug.<name>: Run the bnd(run) file <name>.bnd(run) in DEBUG mode.') { taskName ->
		if (taskName.startsWith('debug.')) {
			def bndrun = taskName - 'debug.'
			def runFile = getRunFile(projectDir, bndrun)
			if (runFile.isFile()) {
				task(taskName) {
					description "Run the bnd(run) file <name>.bnd(run) in DEBUG mode.\nUse the system property 'bndrun.debug' to specify custom debug options."
					dependsOn assemble
					group 'export'
					def debugOpts = System.getProperty('bndrun.debug')
					if (debugOpts == null) {
						debugOpts = "'-Xdebug','-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000'"
					}
					doLast {
						Run run = new Run(bndWorkspace, buildDir, runFile)
						run.setProperty("-runvm.${System.currentTimeMillis()}", debugOpts);
						println "Debugging ${bndrun} with\n  -runvm: ${run.getProperty('-runvm*')}"
						ProjectLauncher l = run.getProjectLauncher();
						l.setTrace(true);
						l.launch();
					}
				}
			}
		}
	}
  }
}

def getRunFile(File projectDir, String taskName) {
	def runFile = new File(projectDir, "${taskName}.bndrun")
	if (!runFile.exists()) {
		runFile = new File(projectDir, "${taskName}.bnd")
		if (!runFile.exists())
			throw new GradleException("No ${taskName}.bnd(run) found in ${projectDir}")
	}
	runFile
}

def toString(Resource resource) {
	List<Capability> identities = resource.getCapabilities('osgi.identity')
	Capability idCap = identities.get(0)
	Object id = idCap.getAttributes().get('osgi.identity')
	Object version = idCap.getAttributes().get('version')
	"${id};version='${version}'"
}

task wrapper(type: Wrapper) {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}
